# Copyright (c) 2014, Arista Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#   Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
#   Neither the name of Arista Networks nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ARISTA NETWORKS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
import os
import logging

from ztpserver.serializers import load, dump
from ztpserver.constants import CONTENT_TYPE_YAML
from ztpserver.config import runtime

log = logging.getLogger(__name__)   #pylint: disable=C0103

def load_resource(node_id, filename):
    data = dict()

    contents = load(filename, 
                    CONTENT_TYPE_YAML, 
                    node_id,
                    lock=True)

    if contents and isinstance(contents, dict):
        for key, value in contents.iteritems():
            data[key] = str(value) if value else None
    else:
        if not contents:
            contents = 'empty pool'
        raise Exception(contents)

    return data

def lookup(node_id, data):
    ''' Return an existing allocated resource if one exists '''

    try:
        key = next(m[0] for m in data.iteritems()
                   if m[1] == node_id)
    except StopIteration:
        key = None

    return key

def main(node_id, pool):
    try:
        file_path = os.path.join(runtime.default.data_root, 
                                 'resources')
        filename = os.path.join(file_path, pool)

        data = load_resource(node_id, filename)
        log.debug('%s: loaded resource pool \'%s\': %s' % 
                  (node_id, pool, data))

        match = lookup(node_id, data)

        if match:
            log.debug('%s: already allocated resource \'%s\':\'%s\'' % 
                     (node_id, pool, match))
            return match

        key = next(x[0] for x in data.iteritems() if x[1] is None)
        log.debug('%s: allocated \'%s\':\'%s\'' % (node_id, pool, key))

        data[key] = node_id

        log.debug('%s: writing resource pool \'%s\': %s' % 
                  (node_id, pool, data))
        file_path = os.path.join(file_path, pool)

        # serialize data
        data = dict()
        for key, value in data.items():
            data[key] = str(value) if value else None

        dump(data, file_path, CONTENT_TYPE_YAML, 
             node_id, lock=True)

    except StopIteration:
        log.error('%s: no resource free in \'%s\'' % (node_id, pool))
        raise Exception('%s: no resource free in \'%s\'' % 
                                (node_id, pool))
    except Exception as exc:
        msg = '%s: failed to allocate resource from \'%s\'' % \
            (node_id, pool)
        log.error(msg)
        raise Exception('%s : %s' % (msg, exc.message))

    return str(key)

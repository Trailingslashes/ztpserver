#!/usr/bin/env python
#
# Copyright (c) 2014, Arista Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#  - Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#  - Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#  - Neither the name of Arista Networks nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ARISTA NETWORKS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Bootstrap script
#
#    Version 0.1.0 3/1/2014
#    Written by:
#       EOS+, Arista Networks
#
#    Revision history:
#       0.1.0 - initial release


import datetime
import imp
import json
import jsonrpclib
import logging
import os.path
import re
import requests
import shutil
import sleekxmpp
import socket
import subprocess
import sys
import time
import traceback
import urllib2

from logging.handlers import SysLogHandler
from subprocess import PIPE


__version__ = "0.1.0"

# Server will replace this value with the correct IP address/hostname
# before responding to the bootstrap request.
SERVER = "$SERVER"

LOGGING_FACILITY = 'ztpbootstrap'
SYSLOG = '/dev/log'

CONTENT_TYPE_PYTHON = 'text/x-python'
CONTENT_TYPE_HTML = 'text/html'
CONTENT_TYPE_OTHER = 'text/plain'
CONTENT_TYPE_JSON = 'application/json'

TEMP = '/tmp'

COMMAND_API_SERVER = 'localhost'
COMMAND_API_USERNAME = 'ztps'
COMMAND_API_PASSWORD = 'ztps-password'
COMMAND_API_PROTOCOL = 'http'

STATUS_OK = 200
STATUS_CREATED = 201
STATUS_BAD_REQUEST = 400
STATUS_NOT_FOUND = 404
STATUS_CONFLICT = 409

STARTUP_CONFIG = '/mnt/flash/startup-config'
RC_EOS = '/mnt/flash/rc.eos'
BOOT_EXTENSIONS = '/mnt/flash/boot-extensions'
BOOT_EXTENSIONS_FOLDER = '/mnt/flash/.extensions'

FLASH = '/mnt/flash'

HTTP_TIMEOUT = 10

syslog_manager = None     #pylint: disable=C0103
xmpp_client = None        #pylint: disable=C0103


#---------------------------------XMPP------------------------
# Uncomment this section in order to enable XMPP debug logging
# logging.basicConfig(level=logging.DEBUG,
#                     format='%(levelname)-8s %(message)s')
#---------------------------------XMPP------------------------

SYSTEM_ID = None
def log(msg, error=False, xmpp=True):
    if SYSTEM_ID:
        msg = '%s: %s' % (SYSTEM_ID, msg)
    print msg

    if syslog_manager:
        if error:
            syslog_manager.log.error(msg)
        else:
            syslog_manager.log.info(msg)

    timestamp = datetime.datetime.now().strftime('%Y-%m-%d_%H:%M:%S')
    msg = '%s: ztp-bootstrap: %s%s' % (timestamp,
                                       'ERROR: ' if error else '',
                                       msg)

    if xmpp and xmpp_client and xmpp_client.connected:
        xmpp_client.message(msg)

def exit_bootstrap(code):
    #pylint: disable=W0702

    # Wait for XMPP messages to drain
    time.sleep(3)

    if xmpp_client:
        try:
            xmpp_client.abort()
        except:
            pass
        
    sys.stdout.flush()
    sys.stderr.flush()

    #pylint: disable=W0212
    # Need to close background sleekxmpp threads as well
    os._exit(code)

class ZtpBootstrapEapiError(Exception):
    pass

class ZtpConnectionError(Exception):
    pass

class ZtpInvalidDefinitionLocationError(Exception):
    pass

class ZtpActionError(Exception):
    pass


class Attributes(object):

    def __init__(self, local_attr=None, special_attr=None):
        self.local_attr = local_attr if local_attr else []
        self.special_attr = special_attr if special_attr else []

    def get(self, attr, default=None):
        if attr in self.local_attr:
            return self.local_attr[attr]
        elif attr in self.special_attr:
            return self.special_attr[attr]
        else:
            return default

    def copy(self):
        attrs = dict()
        if self.special_attr:
            attrs = self.special_attr.copy()
        if self.local_attr:
            attrs.update(self.local_attr)
        return attrs


class Node(object):
     #pylint: disable=R0201

    def __init__(self):
        Node._enable_api()

        url = '%s://%s:%s@%s/command-api' % (COMMAND_API_PROTOCOL,
                                             COMMAND_API_USERNAME,
                                             COMMAND_API_PASSWORD,
                                             COMMAND_API_SERVER )
        self.client = jsonrpclib.Server(url)

        try:
            self.api_enable_cmds([])
        except socket.error:
            raise ZtpBootstrapEapiError()

        global SYSTEM_ID                    #pylint: disable=W0603
        SYSTEM_ID = \
            self.api_enable_cmds(['show version'])[0]['systemMacAddress']

    @classmethod
    def _cli_enable_cmd(cls, cmd):
        cmd = ['FastCli', '-p', '15', '-A', '-c', cmd]
        proc = subprocess.Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE)
        (out, err) = proc.communicate()
        code = proc.returncode             #pylint: disable=E1101
        return (code, out, err)

    @classmethod
    def _cli_config_cmds(cls, cmds):
        cls._cli_enable_cmd('\n'.join(['configure'] + cmds))

    @classmethod
    def _enable_api(cls):
        cls._cli_config_cmds(['username %s secret %s privilege 15' %
                              (COMMAND_API_USERNAME,
                               COMMAND_API_PASSWORD),
                              'management api http-commands',
                              'no protocol https',
                              'protocol %s' % COMMAND_API_PROTOCOL,
                              'no shutdown'])

        _, out, _ = cls._cli_enable_cmd('show management api http-commands |'
                                        ' grep running')
        retries = 3
        while not out and retries:
            log( 'Waiting for CommandAPI to be enabled...')
            time.sleep( 1 )
            retries = retries - 1
            _, out, _ = cls._cli_enable_cmd(
                'show management api http-commands | grep running')


    def api_enable_cmds(self, cmds, text_format=False):
        req_format = 'text' if text_format else 'json'
        result = self.client.runCmds(1, cmds, req_format)
        if text_format:
            return [x.values()[0] for x in result]
        else:
            return result

    def system(self):
        result = {}
        info = self.api_enable_cmds(['show version'])[0]

        result['model'] = info['modelName']
        result['version'] = info['version']
        result['systemmac'] = info['systemMacAddress']
        result['serialnumber'] = info['serialNumber']

        return result

    def neighbors(self):
        result = {}
        info = self.api_enable_cmds(['show lldp neighbors'])[0]
        result['neighbors'] = {}
        for entry in info['lldpNeighbors']:
            neighbor = {}
            neighbor['device'] = entry['neighborDevice']
            neighbor['port'] = entry['neighborPort']
            if entry['port'] in result['neighbors']:
                result['neighbors'][entry['port']] += [neighbor]
            else:
                result['neighbors'][entry['port']] = [neighbor]
        return result

    def details(self):
        return dict(self.system().items() +
                    self.neighbors().items())

    def has_startup_config(self):
        return os.path.isfile(STARTUP_CONFIG) and \
               open(STARTUP_CONFIG).read().strip()

    def _has_rc_eos(self):
        return os.path.isfile(RC_EOS)

    def _append_lines(self, filename, lines):
        with open(filename, 'a') as output:
            output.write('\n')
            output.write('\n'.join(lines))

    def append_startup_config_lines(self, lines):
        self._append_lines(STARTUP_CONFIG, lines)

    def append_rc_eos_lines(self, lines):
        if not self._has_rc_eos():
            lines = ['#!/bin/bash'] + lines
        self._append_lines(RC_EOS, lines)

    def log_msg(self, msg, error=False):
        log(msg, error)

    def rc_eos(self):
        return RC_EOS

    def flash(self):
        return FLASH

    def startup_config(self):
        return STARTUP_CONFIG

    def retrieve_url(self, url, path):
        url = urllib2.urlopen(url)
        output_file = open(path, 'wb')
        output_file.write(url.read())
        output_file.close()

    @classmethod
    def server_address(cls):
        return SERVER


class SyslogManager(object):

    def __init__(self):
        self.log = logging.getLogger('ztpbootstrap')
        self.log.setLevel(logging.DEBUG)
        self.formatter = logging.Formatter('ztp-bootstrap: %(levelname)s: '
                                           '%(message)s')

        # syslog to localhost enabled by default
        self._add_syslog_handler()

    def _add_handler(self, handler, level=None):
        if level is None:
            level = 'DEBUG'

        try:
            handler.setLevel(logging.getLevelName(level))
        except ValueError:
            log('SyslogManager: unknown logging level (%s) - using '
                'log.DEFAULT instead' % level, error=True)
            handler.setLevel(logging.DEBUG)

        handler.setFormatter(self.formatter)
        self.log.addHandler(handler)

    def _add_syslog_handler(self):
        log('SyslogManager: adding localhost handler')
        self._add_handler(SysLogHandler(address=SYSLOG))

    def _add_file_handler(self, filename, level=None):
        log('SyslogManager: adding file handler (%s - level:%s)' %
            (filename, level))
        self._add_handler(logging.FileHandler(filename), level)

    def _add_remote_syslog_handler(self, host, port, level=None):
        log('SyslogManager: adding remote handler (%s:%s - level:%s)' %
            (host, port, level))
        self._add_handler(SysLogHandler(address=(host, port)), level)

    def add_handlers(self, handler_config):
        for entry in handler_config:
            match = re.match('^file:(.+)',
                             entry['destination'])
            if match:
                self._add_file_handler(match.groups()[ 0 ],
                                       entry['level'])
            else:
                match = re.match('^(.+):(.+)',
                                 entry['destination'])
                if match:
                    self._add_remote_syslog_handler(match.groups()[ 0 ],
                                                    int(match.groups()[ 1 ]),
                                                    entry['level'])
                else:
                    log('SyslogManager: Unable to create syslog handler for'
                        ' %s' % str( entry ), error=True)


class Server(object):

    def __init__(self, url):
        self.url = url

    def _http_request(self, path=None, method='get', headers=None,
                      payload=None, files=None, path_is_local=True):
        if headers is None:
            headers = {}
        if files is None:
            files = []

        request_files = []
        for entry in files:
            request_files[entry] = open(entry,'rb')

        if path_is_local:
            full_url = '%s/%s' % (self.url, path)
        else:
            full_url = path

        try:
            if method == 'get':
                log('GET %s' % full_url)
                response = requests.get(full_url,
                                        data=json.dumps(payload),
                                        headers=headers,
                                        files=request_files,
                                        timeout=HTTP_TIMEOUT)
            elif method == 'post':
                log('POST %s' % full_url)
                response = requests.post(full_url,
                                         data=json.dumps(payload),
                                         headers=headers,
                                         files=request_files,
                                         timeout=HTTP_TIMEOUT)
            else:
                log('Unknown method %s' % method,
                    error=True)
        except requests.exceptions.ConnectionError:
            raise ZtpConnectionError
        except requests.exceptions.MissingSchema:
            raise ZtpInvalidDefinitionLocationError
        return response

    def get_config(self):
        headers = {'content-type': CONTENT_TYPE_HTML}
        result = self._http_request('bootstrap/config',
                                    headers=headers)
        log('Server response to GET config: contents=%s' % result.json())
        return (result.status_code,
                result.headers['content-type'].split(';')[0],
                result)

    def post_nodes(self, node):
        headers = {'content-type': CONTENT_TYPE_JSON}
        result = self._http_request('nodes',
                                    method='post',
                                    headers=headers,
                                    payload=node)
        location = result.headers['location'] \
            if 'location' in result.headers \
            else None
        log('Server response to POST nodes: status=%s, location=%s' %
            (result.status_code, location))
        return (result.status_code,
                result.headers['content-type'].split(';')[0],
                location)

    def get_definition(self, location):
        headers = {'content-type': CONTENT_TYPE_HTML}
        result = self._http_request(location,
                                    headers=headers,
                                    path_is_local=False)

        if result.status_code == STATUS_OK:
            log('Server response to GET definition: status=%s, contents=%s' %
                (result.status_code, result.json()))
        else:
            log('Server response to GET definition: status=%s' % 
                result.status_code)
        return (result.status_code,
                result.headers['content-type'].split(';')[0],
                result)

    def get_action(self, action):
        headers = {'content-type': CONTENT_TYPE_HTML}
        result = self._http_request('actions/%s' % action,
                                    headers=headers)
        log('Server response to GET action: status=%s' % result.status_code)
        return (result.status_code,
                result.headers['content-type'].split(';')[0],
                result)


class XmppClient(sleekxmpp.ClientXMPP):
    #pylint: disable=W0613, R0904, R0201, R0924

    def __init__(self, user, domain, password, rooms,
                 nick, server, port):

        self.xmpp_jid = '%s@%s' % (user, domain)
        self.connected = False

        try:
            sleekxmpp.ClientXMPP.__init__(self, self.xmpp_jid,
                                          password)
        except sleekxmpp.jid.InvalidJID:
            log('Unable to connect XMPP client because of invalid jid: %s' % 
                self.xmpp_jid)
            return

        self.xmpp_nick =  nick
        self.xmpp_rooms = rooms

        self.xmpp_rooms = []
        for room in rooms:
            self.xmpp_rooms.append('%s@conference.%s' % (room, domain))

        self.add_event_handler('session_start', self._session_connected)
        self.add_event_handler('connect', self._session_connected)
        self.add_event_handler('disconnected', self._session_disconnected)

        # Multi-User Chat
        self.register_plugin('xep_0045')
        # XMPP Ping
        self.register_plugin('xep_0199')
        # Service Discovery
        self.register_plugin('xep_0030')

        log('XmppClient connecting to server...', xmpp=False)
        if server != None:
            self.connect((server, port), reattempt=False)
        else:
            self.connect(reattempt=False)

        self.process(block=False)

        retries = 3
        while not self.connected and retries:
            # Wait to connect
            time.sleep(1)
            retries -= 1

    def _session_connected(self, event):
        log('XmppClient: Session connected (%s)' % self.xmpp_jid,
            xmpp=False)
        self.send_presence()
        self.get_roster()

        self.connected = True

        # Joining rooms
        for room in self.xmpp_rooms:
            self.plugin['xep_0045'].joinMUC(room,
                                            self.xmpp_nick,
                                            wait=True)
            log('XmppClient: Joined room %s as %s' %
                (room, self.xmpp_nick),
                xmpp=False)

    def _session_disconnected(self, event):
        log('XmppClient: Session disconnected (%s)' % self.xmpp_jid,
            xmpp=False)
        self.connected = False

    def message(self, message):
        log('XmppClient: %s says %s' % (self.xmpp_jid, message),
            xmpp=False)
        for room in self.xmpp_rooms:
            self.send_message(mto=room,
                              mbody=message,
                              mtype='groupchat')


def apply_config(config):
    log('Applying server config')
    global xmpp_client                      #pylint: disable=W0603

    log('Configuring syslog')
    syslog_manager.add_handlers(config.get('logging', []))


    log('Configuring XMPP')
    xmpp_config = config.get('xmpp', {})
    if xmpp_config:
        if ('username' in xmpp_config and
            'domain' in xmpp_config and
            'password' in xmpp_config and
            'rooms' in xmpp_config and
            xmpp_config['rooms']):
            xmpp_client = XmppClient(xmpp_config['username'],
                                     xmpp_config['domain'],
                                     xmpp_config['password'],
                                     xmpp_config['rooms'],
                                     xmpp_config.get('nickname',
                                                     xmpp_config['username']),
                                     xmpp_config.get('server', None),
                                     xmpp_config.get('port', 5222))
        else:
            log('XMPP configuration failed because server response is missing '
                'config details', error=True)

def download_action(server, action):
    try:
        status, content, action_response = server.get_action(action)
        if not ((status == STATUS_OK and
                 content == CONTENT_TYPE_PYTHON) or
                (status == STATUS_NOT_FOUND and
                 content == CONTENT_TYPE_HTML)):
            log('Bootstrap process failure - unexpected reponse from server '
                '(status=%s; content-type=%s)' % (status, content),
                error=True)
            exit_bootstrap(3)
        elif status == STATUS_NOT_FOUND:
            log('Bootstrap process failure - action not found on server '
                '(status=%s)' % status, error=True)
            exit_bootstrap(6)
    except ZtpConnectionError:
        log('Bootstrap process FAILURE - server connection error',
            error=True)
        exit_bootstrap(1)

    filename = os.path.join(TEMP, action)
    with open(filename, 'wb') as action_file:
        for chunk in action_response.iter_content(chunk_size=1024):
            if chunk:
                action_file.write(chunk)
        action_file.close()

    os.chmod(filename, 0777)
    return filename

def execute_action(server, action_details, special_attr):
    action = action_details['action']

    description = ''
    if 'description'in action_details:
        description = '(%s)' % action_details['description']

    if action not in sys.modules:
        log('Downloading action %s%s' % (action, description))
        filename = download_action(server, action)

    log('Executing action %s' % action)
    if 'onstart' in action_details:
        log('ACTION %s:%s' % (action, action_details['onstart']))

    try:
        if action in sys.modules:
            module = sys.modules[action]
        else:
            module = imp.load_source(action, filename)

        local_attr = action_details['attributes'] \
                     if 'attributes' in action_details \
                     else []
        ret = module.main(Attributes(local_attr, special_attr))
        if ret:
            raise ZtpActionError('return code %s' % ret)
        log('Action %s executed succesfully' % action)
        if 'onsuccess' in action_details:
            log('ACTION %s:%s' % (action, action_details['onsuccess']))
    except Exception as err:                  #pylint: disable=W0703
        log('Executing %s failed: %s' % (action, err), error=True)
        if 'onfailure' in action_details:
            log('ACTION %s:%s' % (action, action_details['onfailure']))
        exit_bootstrap(8)

def restore_factory_default():
    for filename in [RC_EOS, BOOT_EXTENSIONS]:
        if os.path.exists(filename):
            os.remove(filename)

    shutil.rmtree(BOOT_EXTENSIONS_FOLDER, ignore_errors=True)

def main():
    #pylint: disable=W0603,R0912,R0915
    global syslog_manager

    restore_factory_default()

    syslog_manager = SyslogManager()
    server = Server(SERVER)

    # Retrieve and apply logging/XMPP configuration from server
    log('Retrieving config from server')
    try:
        status, content, config = server.get_config()
        if(status != STATUS_OK or
           content != CONTENT_TYPE_JSON):
            log('Bootstrap process failure - unexpected reponse from server '
                '(status=%s; content-type=%s)' % (status, content),
                error=True)
            exit_bootstrap(3)
    except ZtpConnectionError:
        log('Bootstrap process FAILURE - server connection error',
            error=True)
        exit_bootstrap(1)

    log('Config retrieved from server')
    apply_config(config.json())


    # Check node
    log('Collecting node information')
    try:
        node = Node()
    except ZtpBootstrapEapiError:
        log('Bootstrap process FAILURE - unable to enable eAPI',
            error=True)
        exit_bootstrap(2)

    # Checking node on server
    try:
        status, content, location = server.post_nodes(node.details())
        if(status not in [STATUS_CREATED,
                          STATUS_BAD_REQUEST,
                          STATUS_CONFLICT] or
           content != CONTENT_TYPE_HTML):
            log('Bootstrap process failure - unexpected reponse from server '
                '(status=%s; content-type=%s)' % (status, content),
                error=True)
            exit_bootstrap(3)
        elif status == STATUS_BAD_REQUEST:
            log('Bootstrap process failure - node not found on server '
                '(status=%s)' % status, error=True)
            exit_bootstrap(4)
    except ZtpConnectionError:
        log('Bootstrap process FAILURE - server connection error',
            error=True)
        exit_bootstrap(1)

    # Get definition
    try:
        status, content, definition = server.get_definition(location)
        if not ((status == STATUS_OK and
                 content == CONTENT_TYPE_JSON) or
                (status == STATUS_BAD_REQUEST and
                 content == CONTENT_TYPE_HTML)):
            log('Bootstrap process failure - unexpected reponse from server '
                '(status=%s; content-type=%s)' % (status, content),
                error=True)
            exit_bootstrap(3)
        elif status == STATUS_BAD_REQUEST:
            log('Bootstrap process failure - server-side topology check '
                'failed (status=%s)' % status, error=True)
            exit_bootstrap(5)
    except ZtpConnectionError:
        log('Bootstrap process FAILURE - server connection error',
            error=True)
        exit_bootstrap(1)
    except ZtpInvalidDefinitionLocationError:
        log('Bootstrap process FAILURE - invalid definition location '
            'received from server',
            error=True)
        exit_bootstrap(10)

    # Execute actions
    definition = definition.json()

    for attr in ['name', 'actions']:
        if attr not in definition:
            log('Bootstrap process FAILURE - \'%s\' section missing '
                'from definition' % attr, error=True)
            exit_bootstrap(9)

    definition_name = definition['name']
    log('Applying definition %s' % definition_name)

    
    special_attr = {}
    special_attr['NODE'] = node
    for details in definition['actions']:
        execute_action(server, details, special_attr)

    log('Definition %s applied successfully' % definition_name)

    # Check for startup-config
    if not node.has_startup_config():
        log('Startup configuration is missing at the end of the '
            'bootstrap process', error=True)
        exit_bootstrap(7)

    log('ZTP bootstrap completed successfully!')
    exit_bootstrap(0)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        exit_bootstrap(0)
    except Exception, exception:
        log('Bootstrap process FAILURE: %s' % exception)
        log(sys.exc_info()[0])
        log(traceback.format_exc())
        exit_bootstrap(11)

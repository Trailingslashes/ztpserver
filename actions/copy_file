#!/usr/bin/env python 
#
# Copyright (c) 2014, Arista Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#  - Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#  - Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#  - Neither the name of Arista Networks nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ARISTA NETWORKS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#pylint: disable=W0702

BACKUP_SUFFIX = '.backup'
PERSISTENT_DIR = '/mnt/flash/.ztp-files'

import os
import urllib

def main(attributes): 
    '''Copies file to the switch.

    Copies file based on the values of 'copy_file-src_url' and
    'copy_file-dst_url' attributes (both should point to the filename
    itself, and not the containing folder).  If 'copy_file-overwrite'
    is set to:
       - 'replace': the file is copied to the switch regardless
         of whether there is already a file with the same name at the 
         destination;
       - 'keep-original': the file is copied to the switch only if
         there is not already a file with the same name at the
         destination; if there is, then the action is a no-op;
       - 'backup': the file is copied to the switch; if there is
         already another file at the destination, that file is renamed
         by appending the '.backup' suffix
    If 'copy_file-overwrite' is not set, then 'replace' is the default
    behaviour.

    Args:
       attributes: list of attributes; use attributes.get(<ATTRIBUTE_NAME>)
                   to read attribute values

       Special attributes:
           node: attributes.get('NODE')
                 API: see documentation

    Returns:
        0 - success
        1 - missing attribute('copy_file-src_url')
        2 - missing attribute('copy_file-dst_url')
        3 - erroneous 'copy_file-overwrite' value
        4 - unable to retrieve file from URL

    Raises:
        None
    '''

    src_url = attributes.get('copy_file-src_url')
    if not src_url:
        return 1

    dst_url = attributes.get('copy_file-dst_url')
    if not dst_url:
        return 2

    name = dst_url.split('/')[ -1 ]

    overwrite = attributes.get('copy_file-overwrite')
    if not overwrite:
        overwrite = 'replace'

    lines = []
    if overwrite == 'keep-original':
        lines = lines + ['[ ! -f %s ] && '
                         'sudo cp %s/%s %s'  % (dst_url, PERSISTENT_DIR,
                                                name, dst_url)]
    elif overwrite == 'backup':
        lines = lines + ['[ -f %s ] && '
                         'sudo mv %s %s%s' % (dst_url, dst_url, 
                                              dst_url, BACKUP_SUFFIX)]
        lines = lines + ['sudo cp %s/%s %s'  % (PERSISTENT_DIR,
                                                name, dst_url)]
    elif overwrite == 'replace':
        lines = lines + ['sudo cp %s/%s %s'  % (PERSISTENT_DIR,
                                                name, dst_url)]
    else:
        return 3

    try:
        os.makedirs(PERSISTENT_DIR)
    except OSError:
        # file exists
        pass

    try:
        urllib.urlretrieve(src_url, 
                           '%s/%s' % (PERSISTENT_DIR, name))
    except:
        return 4

    attributes.get('NODE').append_rc_eos_lines(lines)
